==73986== Memcheck, a memory error detector
==73986== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==73986== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==73986== Command: ./42sh
==73986== 
==73986== Syscall param msg->desc.port.name points to uninitialised byte(s)
==73986==    at 0x10043D34A: mach_msg_trap (in /usr/lib/system/libsystem_kernel.dylib)
==73986==    by 0x10043C796: mach_msg (in /usr/lib/system/libsystem_kernel.dylib)
==73986==    by 0x100436485: task_set_special_port (in /usr/lib/system/libsystem_kernel.dylib)
==73986==    by 0x1005D210E: _os_trace_create_debug_control_port (in /usr/lib/system/libsystem_trace.dylib)
==73986==    by 0x1005D2458: _libtrace_init (in /usr/lib/system/libsystem_trace.dylib)
==73986==    by 0x10013B9DF: libSystem_initializer (in /usr/lib/libSystem.B.dylib)
==73986==    by 0x100069A1A: ImageLoaderMachO::doModInitFunctions(ImageLoader::LinkContext const&) (in /usr/lib/dyld)
==73986==    by 0x100069C1D: ImageLoaderMachO::doInitialization(ImageLoader::LinkContext const&) (in /usr/lib/dyld)
==73986==    by 0x1000654A9: ImageLoader::recursiveInitialization(ImageLoader::LinkContext const&, unsigned int, char const*, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) (in /usr/lib/dyld)
==73986==    by 0x100065440: ImageLoader::recursiveInitialization(ImageLoader::LinkContext const&, unsigned int, char const*, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) (in /usr/lib/dyld)
==73986==    by 0x100064523: ImageLoader::processInitializers(ImageLoader::LinkContext const&, unsigned int, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) (in /usr/lib/dyld)
==73986==    by 0x1000645B8: ImageLoader::runInitializers(ImageLoader::LinkContext const&, ImageLoader::InitializerTimingList&) (in /usr/lib/dyld)
==73986==  Address 0x1048dcd2c is on thread 1's stack
==73986==  in frame #2, created by task_set_special_port (???:)
==73986== 
42sh: ${a/}: bad substitution
==73986== Invalid read of size 8
==73986==    at 0x10000472B: convert_list (convert_list.c:102)
==73986==    by 0x10000127A: main_loop (main.c:80)
==73986==    by 0x1000013D0: main (main.c:110)
==73986==  Address 0x100c0e848 is 8 bytes inside a block of size 32 free'd
==73986==    at 0x1000EAE2B: free (in /Users/mjose/.brew/Cellar/valgrind/3.13.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)
==73986==    by 0x10002BE4C: ft_free (garbage_free.c:64)
==73986==    by 0x100021DE9: ft_lstdelcmd (cmd_expan_checker.c:29)
==73986==    by 0x10002236D: rmv_invalid_expansion (cmd_tools.c:74)
==73986==    by 0x100021F7C: re_format_line (cmd_expan_checker.c:69)
==73986==    by 0x100022108: check_exp_error (cmd_expan_checker.c:105)
==73986==    by 0x100001265: main_loop (main.c:78)
==73986==    by 0x1000013D0: main (main.c:110)
==73986==  Block was alloc'd at
==73986==    at 0x1000EAA46: malloc (in /Users/mjose/.brew/Cellar/valgrind/3.13.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)
==73986==    by 0x10002BFAC: ft_malloc (garbage_malloc.c:56)
==73986==    by 0x100002A43: create_new_list (ft_modif_list.c:19)
==73986==    by 0x10000256C: ft_parseur (ft_parseur.c:117)
==73986==    by 0x100001206: main_loop (main.c:72)
==73986==    by 0x1000013D0: main (main.c:110)
==73986== 
==73986== Invalid read of size 1
==73986==    at 0x100002FCB: its_indir (its_token.c:43)
==73986==    by 0x100004733: convert_list (convert_list.c:102)
==73986==    by 0x10000127A: main_loop (main.c:80)
==73986==    by 0x1000013D0: main (main.c:110)
==73986==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==73986== 
==73986== 
==73986== Process terminating with default action of signal 11 (SIGSEGV)
==73986==  Access not within mapped region at address 0x0
==73986==    at 0x100002FCB: its_indir (its_token.c:43)
==73986==    by 0x100004733: convert_list (convert_list.c:102)
==73986==    by 0x10000127A: main_loop (main.c:80)
==73986==    by 0x1000013D0: main (main.c:110)
==73986==  If you believe this happened as a result of a stack
==73986==  overflow in your program's main thread (unlikely but
==73986==  possible), you can try to increase the size of the
==73986==  main thread stack using the --main-stacksize= flag.
==73986==  The main thread stack size used in this run was 8388608.
==73986== 
==73986== HEAP SUMMARY:
==73986==     in use at exit: 31,084 bytes in 409 blocks
==73986==   total heap usage: 1,496 allocs, 1,087 frees, 77,727 bytes allocated
==73986== 
==73986== 72 bytes in 3 blocks are possibly lost in loss record 106 of 138
==73986==    at 0x1000EB0B2: calloc (in /Users/mjose/.brew/Cellar/valgrind/3.13.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)
==73986==    by 0x100646832: map_images_nolock (in /usr/lib/libobjc.A.dylib)
==73986==    by 0x100659D6A: map_images (in /usr/lib/libobjc.A.dylib)
==73986==    by 0x10005903B: dyld::notifyBatchPartial(dyld_image_states, bool, char const* (*)(dyld_image_states, unsigned int, dyld_image_info const*), bool, bool) (in /usr/lib/dyld)
==73986==    by 0x100059255: dyld::registerObjCNotifiers(void (*)(unsigned int, char const* const*, mach_header const* const*), void (*)(char const*, mach_header const*), void (*)(char const*, mach_header const*)) (in /usr/lib/dyld)
==73986==    by 0x10029400A: _dyld_objc_notify_register (in /usr/lib/system/libdyld.dylib)
==73986==    by 0x100646072: _objc_init (in /usr/lib/libobjc.A.dylib)
==73986==    by 0x10022768D: _os_object_init (in /usr/lib/system/libdispatch.dylib)
==73986==    by 0x10022763A: libdispatch_init (in /usr/lib/system/libdispatch.dylib)
==73986==    by 0x10013B9D5: libSystem_initializer (in /usr/lib/libSystem.B.dylib)
==73986==    by 0x100069A1A: ImageLoaderMachO::doModInitFunctions(ImageLoader::LinkContext const&) (in /usr/lib/dyld)
==73986==    by 0x100069C1D: ImageLoaderMachO::doInitialization(ImageLoader::LinkContext const&) (in /usr/lib/dyld)
==73986== 
==73986== LEAK SUMMARY:
==73986==    definitely lost: 0 bytes in 0 blocks
==73986==    indirectly lost: 0 bytes in 0 blocks
==73986==      possibly lost: 72 bytes in 3 blocks
==73986==    still reachable: 13,134 bytes in 253 blocks
==73986==         suppressed: 17,878 bytes in 153 blocks
==73986== Reachable blocks (those to which a pointer was found) are not shown.
==73986== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==73986== 
==73986== For counts of detected and suppressed errors, rerun with: -v
==73986== Use --track-origins=yes to see where uninitialised values come from
==73986== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 12 from 12)
